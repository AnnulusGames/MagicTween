using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace MagicTween.Generator
{
	[Generator]
	public sealed class TweenPluginGenerator : ISourceGenerator
	{
		class SyntaxReceiver : ISyntaxReceiver
		{
            internal static ISyntaxReceiver Create()
            {
                return new SyntaxReceiver();
            }

            public List<TypeDeclarationSyntax> PluginTypes { get; } = new();

			public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
			{
                if (syntaxNode is TypeDeclarationSyntax typeSyntax)
                {
                    if (typeSyntax.AttributeLists.Count > 0)
                    {
                        var hasAttribute = typeSyntax.AttributeLists
                            .SelectMany(x => x.Attributes)
                            .Any(x => x.Name.ToString() is "TweenPlugin"
                                or "TweenPluginAttribute"
                                or "MagicTween.TweenPlugin"
                                or "MagicTween.TweenPluginAttribute");
                        if (hasAttribute)
                        {
                            PluginTypes.Add(typeSyntax);
                        }
                    }
                }
            }
		}

		public void Initialize(GeneratorInitializationContext context)
		{
			context.RegisterForSyntaxNotifications(SyntaxReceiver.Create);
		}

		public void Execute(GeneratorExecutionContext context)
		{
			if (context.SyntaxReceiver is not SyntaxReceiver receiver || receiver.PluginTypes.Count == 0) return;

			var compilation = context.Compilation;

			try
			{
                foreach (var pluginStructDecl in receiver.PluginTypes)
                {
                    GenericNameSyntax pluginInterfaceSyntax = default;
                    foreach (var baseType in pluginStructDecl.BaseList.Types)
                    {
                        var iName = baseType.GetText().ToString();
                        if (iName.Contains("ICustomTweenPlugin") || iName.Contains("MagicTween.ICustomTweenPlugin"))
                        {
                            pluginInterfaceSyntax = baseType.Type as GenericNameSyntax;
                            if (pluginInterfaceSyntax != null) break;
                        }
                    }
                    if (pluginInterfaceSyntax == null) continue;

                    var valueTypeSyntax = pluginInterfaceSyntax.TypeArgumentList.Arguments[0];
                    var optionsTypeSyntax = pluginInterfaceSyntax.TypeArgumentList.Arguments[1];

                    var valueType = compilation.GetSemanticModel(valueTypeSyntax.SyntaxTree)
                        .GetSymbolInfo(valueTypeSyntax).Symbol;
                    var optionsType = compilation.GetSemanticModel(optionsTypeSyntax.SyntaxTree)
                        .GetSymbolInfo(optionsTypeSyntax).Symbol;
                    var pluginType = compilation.GetSemanticModel(pluginStructDecl.SyntaxTree)
                        .GetDeclaredSymbol(pluginStructDecl);

                    var valueTypeFullName = valueType.ContainingNamespace.IsGlobalNamespace ? valueType.Name : valueType.ContainingNamespace + "." + valueType.Name;
                    var optionsTypeFullName = optionsType.ContainingNamespace.IsGlobalNamespace ? optionsType.Name : optionsType.ContainingNamespace + "." + optionsType.Name;
                    var pluginTypeFullName = pluginType.ContainingNamespace.IsGlobalNamespace ? pluginType.Name : pluginType.ContainingNamespace + "." + pluginType.Name;
                    context.AddSource($"__CustomTweenPlugin_{valueType.Name}.g.cs",
    $@"
// <auto-generated/>

using Unity.Burst;
using Unity.Entities;
using Unity.Mathematics;
using MagicTween.Core;
using MagicTween.Core.Components;
using MagicTween.Core.Systems;
using MagicTween.Plugins;
using MagicTween;

[assembly: RegisterGenericComponentType(typeof(TweenValue<global::{valueTypeFullName}>))]
[assembly: RegisterGenericComponentType(typeof(TweenStartValue<global::{valueTypeFullName}>))]
[assembly: RegisterGenericComponentType(typeof(TweenEndValue<global::{valueTypeFullName}>))]
[assembly: RegisterGenericComponentType(typeof(TweenOptions<global::{optionsTypeFullName}>))]
[assembly: RegisterGenericComponentType(typeof(TweenPluginTag<global::{pluginTypeFullName}>))]
[assembly: RegisterGenericComponentType(typeof(TweenDelegates<global::{valueTypeFullName}>))]
[assembly: RegisterGenericComponentType(typeof(TweenDelegatesNoAlloc<global::{valueTypeFullName}>))]

namespace MagicTween.Generated{(valueType.ContainingNamespace.IsGlobalNamespace ? string.Empty : "." + valueType.ContainingNamespace.Name)}
{{
	partial class {valueType.Name}TweenSystem : StandardTweenSystemBase<global::{valueTypeFullName}, global::{optionsTypeFullName}, global::{pluginTypeFullName}> {{ }}
	partial class {valueType.Name}TweenDelegateTranslationSystem : TweenDelegateTranslationSystemBase<global::{valueTypeFullName}, global::{optionsTypeFullName}, global::{pluginTypeFullName}> {{ }}
}}
");
                }
            }
			catch (Exception ex)
			{
                var diagnosticDescriptor = new DiagnosticDescriptor("MagicTweenError", "MagicTweenError", $"Generation failed with:\n {ex}", "MagicTweenError", DiagnosticSeverity.Error, true);
                context.ReportDiagnostic(Diagnostic.Create(diagnosticDescriptor, Location.None, DiagnosticSeverity.Error));
            }
		}
	}
}
